@using SpaccioDescans.Web.Pages.Products

<div class="col-sm-12 col-lg-12 col-md-12" style="margin-bottom: 2px;">
    <b class="spaccio-label">Productos</b>
</div>
<div class="col-sm-12 col-lg-12 col-md-12">
    @foreach (var orderDetail in OrderDetailViewModels)
    {
        <OrderDetailItem OrderDetailViewModel="orderDetail"
                     OnRemoveOrderDetail="RemoveItem"
                     OnOrderDetailUpdated="InvokeOnOrderDetailUpdated" />
    }
    <SfButton CssClass="e-success" Type="button" @onclick="@(() => this.DialogVisibility = true)">Añadir</SfButton>
</div>
<SfDialog Width="80%" ID="product-dialog"
          ShowCloseIcon="true" AllowPrerender="true" IsModal="true" @bind-Visible="@this.DialogVisibility">
    <DialogTemplates>
        <Content>
            <ProductsData OnProductSelected="ProductSelected" />
        </Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@DialogEffect.FadeZoom" Duration="400" />
</SfDialog>

@code {
    [Parameter]
    public ICollection<OrderDetailViewModel> OrderDetailViewModels { get; set; } = default!;

    [Parameter]
    public EventCallback<decimal> OnOrderDetailUpdated { get; set; }

    private bool DialogVisibility { get; set; }

    private EventCallback ProductSelected => new(this, (Func<ProductViewModel, Task>)(async product =>
    {
        this.DialogVisibility = false;
        await UpdateProduct(product);
    }));

    private async Task UpdateProduct(ProductViewModel product)
    {
        this.OrderDetailViewModels.Add(new OrderDetailViewModel
            {
                Name = $"{product.Vendor} {product.Name} {product.Measures}",
                Price = product.Price,
                ProductId = product.Id
            });

        await InvokeOnOrderDetailUpdated();
    }

    private async Task RemoveItem(long productId)
    {
        this.OrderDetailViewModels.Remove(this.OrderDetailViewModels.First(x => x.ProductId == productId));
        await InvokeOnOrderDetailUpdated();
    }

    private async Task InvokeOnOrderDetailUpdated()
    {
        await this.OnOrderDetailUpdated.InvokeAsync(this.OrderDetailViewModels.Sum(x => x.Total));
    }
}
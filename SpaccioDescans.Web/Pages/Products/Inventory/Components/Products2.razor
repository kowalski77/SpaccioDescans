@using MediatR
@using SpaccioDescans.Core.Application.Products.Commands
@using SpaccioDescans.Core.Application.Products.Queries
@using TextAlign = Syncfusion.Blazor.Grids.TextAlign
@using Action = Syncfusion.Blazor.Grids.Action

<SfGrid DataSource="@Products"
        @ref="@this.Grid"
        Toolbar="@(new List<string> { "Add", "Edit", "Delete", "Cancel", "Update" })"
        AllowPaging="true" AllowSorting="true" AllowFiltering="true"
        AllowResizing="true">
    <GridPageSettings PageSize="5" />
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"/>
    <GridColumns>
        <GridColumn Field="@nameof(ProductViewModel.Id)" HeaderText="Id" Width="100" AllowAdding="false" AllowEditing="false"/>
        <GridColumn Field="@nameof(ProductViewModel.Vendor)" HeaderText="Fabricante" />
        <GridColumn Field="@nameof(ProductViewModel.Name)" HeaderText="Nombre" />
        <GridColumn Field="@nameof(ProductViewModel.Description)" HeaderText="Descripción" />
        <GridColumn Field="@nameof(ProductViewModel.Measures)" HeaderText="Medidas" Width="150" />
        <GridColumn Field="@nameof(ProductViewModel.Price)" HeaderText="Precio" Width="150" TextAlign="TextAlign.Center" />
        <GridColumn Field="@nameof(ProductViewModel.QuantityStoreOne)" HeaderText="Tienda 1" AllowFiltering="false" Width="100" TextAlign="TextAlign.Center" />
        <GridColumn Field="@nameof(ProductViewModel.QuantityStoreTwo)" HeaderText="Tienda 2" AllowFiltering="false" Width="100" TextAlign="TextAlign.Center" />
    </GridColumns>
    <GridEvents TValue="ProductViewModel" OnActionComplete="this.OnGridActionComplete"/>
</SfGrid>

@code {

    [Inject] private IMediator Mediator { get; set; } = default!;

    public List<ProductViewModel>? Products { get; set; }

    public SfGrid<ProductViewModel> Grid { get; set; } = default!;

    public async Task OnGridActionComplete(ActionEventArgs<ProductViewModel> arg)
    {
        if (arg.RequestType == Action.Save)
        {
            var command = (CreateProductCommand)arg.Data;
            var id = await this.Mediator.Send(command);

            arg.Data.Id = id;
            await this.Grid.Refresh();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var products = await this.Mediator.Send(new GetProductsQuery());
        var viewModels = products.Select(x => (ProductViewModel)x).ToList();

        this.Products = viewModels;
    }
}
<div class="row">
    <div class="col-md-2">
        <RadzenNumeric TValue="int" Step="1" style="width: 20%;" Name="Cantidad" @bind-Value="OrderDetailViewModel.Quantity" />
    </div>
    <div class="col-4">
        <RadzenTextBox style="width: 100%;" Placeholder="Producto" @bind-Value="name" ReadOnly="true"/>
    </div>
    <div class="col-md-1">
        <RadzenNumeric TValue="decimal" style="width: 100%;" @bind-Value="price" ShowUpDown="false" ReadOnly="true" />
    </div>
    <div class="col-md-2">
        <RadzenNumeric TValue="decimal" style="width: 20%;" Name="Descuento" @bind-Value="OrderDetailViewModel.Discount" />
    </div>
    <div class="align-items-center d-flex col-md-2">
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="search" style="display: inline-block; margin-left: 20px;" Click="@OpenOrder" ButtonType="ButtonType.Button" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Click="@RemoveProduct" ButtonType="ButtonType.Button" />
    </div>
</div>

@code {

    [Parameter]
    public OrderDetailViewModel OrderDetailViewModel { get; set; } = new();

    [Parameter]
    public EventCallback<int> OnRemoveOrderDetail { get; set; }

    [Inject]
    private DialogService DialogService { get; set; } = default!;

    private string name = string.Empty;
    private decimal price;

    private async Task OpenOrder()
    {
        await DialogService.OpenAsync<SearchProductDialog>("Buscar producto", new Dictionary<string, object>
        {
            {"OnProductSelected", ProductSelected}
        },
            new DialogOptions { Width = "90%", Height = "570px", Resizable = true, Draggable = true });
    }

    private EventCallback ProductSelected => new(this, (Func<ProductViewModel, Task>)(async product =>
    {
        await UpdateProduct(product);
    }));

    private Task UpdateProduct(ProductViewModel product)
    {
        this.name = $"{product.Vendor} {product.Name} {product.Measures}";
        this.price = product.Price;
        this.OrderDetailViewModel.ProductCode = product.ProductCode;

        return Task.CompletedTask;
    }

    private async Task RemoveProduct()
    {
        await this.OnRemoveOrderDetail.InvokeAsync(this.OrderDetailViewModel.Order);
    }
}